#!/usr/bin/env python3
import os
import subprocess
import io
import zipfile
import sys

try:
    import requests
except ImportError as e:
    sys.exit(f"Error: {str(e)}. Try 'sudo python3 -m pip install <module-name>'")

os.chdir(os.path.dirname(os.path.realpath(__file__)))
os.chdir('..')

cmd = "find electrum -type f -name '*.py' -o -name '*.kv'"

files = subprocess.check_output(cmd, shell=True)

with open("app.fil", "wb") as f:
    f.write(files)

print("Found {} files to translate".format(len(files.splitlines())))

# Generate fresh translation template
if not os.path.exists('electrum/locale'):
    os.mkdir('electrum/locale')
cmd = 'xgettext -s --from-code UTF-8 --language Python --no-wrap -f app.fil --output=electrum/locale/messages.pot'
print('Generate template')
os.system(cmd)

os.chdir('electrum')

crowdin_identifier = 'electrum'
crowdin_file_name = 'files[electrum-client/messages.pot]'
locale_file_name = 'locale/messages.pot'
crowdin_api_key = None

filename = os.path.expanduser('~/.crowdin_api_key')
if os.path.exists(filename):
    with open(filename) as f:
        crowdin_api_key = f.read().strip()

if "crowdin_api_key" in os.environ:
    crowdin_api_key = os.environ["crowdin_api_key"]

if crowdin_api_key:
    # Push to Crowdin
    print('Push to Crowdin')
    url = ('https://api.crowdin.com/api/project/' + crowdin_identifier + '/update-file?key=' + crowdin_api_key)
    with open(locale_file_name, 'rb') as f:
        files = {crowdin_file_name: f}
        response = requests.request('POST', url, files=files)
    print("", "update-file:", "-"*20, response.text, "-"*20, sep="\n")
    # Build translations
    print('Build translations')
    response = requests.request('GET', 'https://api.crowdin.com/api/project/' + crowdin_identifier + '/export?key=' + crowdin_api_key)
    print("", "export:", "-" * 20, response.text, "-" * 20, sep="\n")

